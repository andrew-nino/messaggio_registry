// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mocks/mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	models "github.com/andrew-nino/messaggio/internal/domain/models"
	gomock "go.uber.org/mock/gomock"
)

// MockClients is a mock of Clients interface.
type MockClients struct {
	ctrl     *gomock.Controller
	recorder *MockClientsMockRecorder
}

// MockClientsMockRecorder is the mock recorder for MockClients.
type MockClientsMockRecorder struct {
	mock *MockClients
}

// NewMockClients creates a new mock instance.
func NewMockClients(ctrl *gomock.Controller) *MockClients {
	mock := &MockClients{ctrl: ctrl}
	mock.recorder = &MockClientsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClients) EXPECT() *MockClientsMockRecorder {
	return m.recorder
}

// DeleteClientOnRepo mocks base method.
func (m *MockClients) DeleteClientOnRepo(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientOnRepo", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientOnRepo indicates an expected call of DeleteClientOnRepo.
func (mr *MockClientsMockRecorder) DeleteClientOnRepo(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientOnRepo", reflect.TypeOf((*MockClients)(nil).DeleteClientOnRepo), id)
}

// GetClientFromRepo mocks base method.
func (m *MockClients) GetClientFromRepo(id int) (models.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientFromRepo", id)
	ret0, _ := ret[0].(models.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientFromRepo indicates an expected call of GetClientFromRepo.
func (mr *MockClientsMockRecorder) GetClientFromRepo(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientFromRepo", reflect.TypeOf((*MockClients)(nil).GetClientFromRepo), id)
}

// GetStatisticOnRepo mocks base method.
func (m *MockClients) GetStatisticOnRepo() (models.Statistic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatisticOnRepo")
	ret0, _ := ret[0].(models.Statistic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatisticOnRepo indicates an expected call of GetStatisticOnRepo.
func (mr *MockClientsMockRecorder) GetStatisticOnRepo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatisticOnRepo", reflect.TypeOf((*MockClients)(nil).GetStatisticOnRepo))
}

// RegisterClientOnRepo mocks base method.
func (m *MockClients) RegisterClientOnRepo(arg0 models.Client) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterClientOnRepo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterClientOnRepo indicates an expected call of RegisterClientOnRepo.
func (mr *MockClientsMockRecorder) RegisterClientOnRepo(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterClientOnRepo", reflect.TypeOf((*MockClients)(nil).RegisterClientOnRepo), arg0)
}

// UpdateClientOnRepo mocks base method.
func (m *MockClients) UpdateClientOnRepo(arg0 models.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClientOnRepo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClientOnRepo indicates an expected call of UpdateClientOnRepo.
func (mr *MockClientsMockRecorder) UpdateClientOnRepo(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClientOnRepo", reflect.TypeOf((*MockClients)(nil).UpdateClientOnRepo), arg0)
}

// MockApprovalService is a mock of ApprovalService interface.
type MockApprovalService struct {
	ctrl     *gomock.Controller
	recorder *MockApprovalServiceMockRecorder
}

// MockApprovalServiceMockRecorder is the mock recorder for MockApprovalService.
type MockApprovalServiceMockRecorder struct {
	mock *MockApprovalService
}

// NewMockApprovalService creates a new mock instance.
func NewMockApprovalService(ctrl *gomock.Controller) *MockApprovalService {
	mock := &MockApprovalService{ctrl: ctrl}
	mock.recorder = &MockApprovalServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApprovalService) EXPECT() *MockApprovalServiceMockRecorder {
	return m.recorder
}

// SetApproval mocks base method.
func (m *MockApprovalService) SetApproval(arg0 models.Answer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetApproval", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetApproval indicates an expected call of SetApproval.
func (mr *MockApprovalServiceMockRecorder) SetApproval(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetApproval", reflect.TypeOf((*MockApprovalService)(nil).SetApproval), arg0)
}

// MockSender is a mock of Sender interface.
type MockSender struct {
	ctrl     *gomock.Controller
	recorder *MockSenderMockRecorder
}

// MockSenderMockRecorder is the mock recorder for MockSender.
type MockSenderMockRecorder struct {
	mock *MockSender
}

// NewMockSender creates a new mock instance.
func NewMockSender(ctrl *gomock.Controller) *MockSender {
	mock := &MockSender{ctrl: ctrl}
	mock.recorder = &MockSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSender) EXPECT() *MockSenderMockRecorder {
	return m.recorder
}

// SendToBroker mocks base method.
func (m *MockSender) SendToBroker(arg0 int, arg1 models.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToBroker", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendToBroker indicates an expected call of SendToBroker.
func (mr *MockSenderMockRecorder) SendToBroker(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToBroker", reflect.TypeOf((*MockSender)(nil).SendToBroker), arg0, arg1)
}
