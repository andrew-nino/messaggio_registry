// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -source=handler.go -destination=mocks/mock.go
//

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	reflect "reflect"

	models "github.com/andrew-nino/messaggio/internal/domain/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRegistry is a mock of Registry interface.
type MockRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryMockRecorder
}

// MockRegistryMockRecorder is the mock recorder for MockRegistry.
type MockRegistryMockRecorder struct {
	mock *MockRegistry
}

// NewMockRegistry creates a new mock instance.
func NewMockRegistry(ctrl *gomock.Controller) *MockRegistry {
	mock := &MockRegistry{ctrl: ctrl}
	mock.recorder = &MockRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistry) EXPECT() *MockRegistryMockRecorder {
	return m.recorder
}

// DeleteClient mocks base method.
func (m *MockRegistry) DeleteClient(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClient", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClient indicates an expected call of DeleteClient.
func (mr *MockRegistryMockRecorder) DeleteClient(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClient", reflect.TypeOf((*MockRegistry)(nil).DeleteClient), id)
}

// GetClient mocks base method.
func (m *MockRegistry) GetClient(arg0 int) (models.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", arg0)
	ret0, _ := ret[0].(models.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient.
func (mr *MockRegistryMockRecorder) GetClient(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockRegistry)(nil).GetClient), arg0)
}

// GetStatistic mocks base method.
func (m *MockRegistry) GetStatistic() (models.Statistic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatistic")
	ret0, _ := ret[0].(models.Statistic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatistic indicates an expected call of GetStatistic.
func (mr *MockRegistryMockRecorder) GetStatistic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatistic", reflect.TypeOf((*MockRegistry)(nil).GetStatistic))
}

// RegisterClient mocks base method.
func (m *MockRegistry) RegisterClient(arg0 models.Client) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterClient", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterClient indicates an expected call of RegisterClient.
func (mr *MockRegistryMockRecorder) RegisterClient(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterClient", reflect.TypeOf((*MockRegistry)(nil).RegisterClient), arg0)
}

// UpdateClient mocks base method.
func (m *MockRegistry) UpdateClient(arg0 models.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClient", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClient indicates an expected call of UpdateClient.
func (mr *MockRegistryMockRecorder) UpdateClient(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClient", reflect.TypeOf((*MockRegistry)(nil).UpdateClient), arg0)
}

// MockApproval is a mock of Approval interface.
type MockApproval struct {
	ctrl     *gomock.Controller
	recorder *MockApprovalMockRecorder
}

// MockApprovalMockRecorder is the mock recorder for MockApproval.
type MockApprovalMockRecorder struct {
	mock *MockApproval
}

// NewMockApproval creates a new mock instance.
func NewMockApproval(ctrl *gomock.Controller) *MockApproval {
	mock := &MockApproval{ctrl: ctrl}
	mock.recorder = &MockApprovalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApproval) EXPECT() *MockApprovalMockRecorder {
	return m.recorder
}

// Approve mocks base method.
func (m *MockApproval) Approve(arg0 models.Answer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Approve", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Approve indicates an expected call of Approve.
func (mr *MockApprovalMockRecorder) Approve(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Approve", reflect.TypeOf((*MockApproval)(nil).Approve), arg0)
}
